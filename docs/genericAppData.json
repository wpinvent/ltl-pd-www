{
    // Defines the allowed data-structures in the application
    // This is complete open-ended - objects and properties can be configured in any way you want (other than a few standard objects like "transaction").
    // This is mainly used for validation purposes for both the incoming and outgoing data, and eventually for tooling support.
    "appSchema": {

        "transaction": {
            "properties": {
                "id": { 
                    "isEditable": false,
                    "dataType": "text"
                },
                "createdDateTime": {
                    "isEditable": false,
                    "dataType": "dateTime"
                },
                "updatedDateTime": {
                    "isEditable": false,
                    "dataType": "dateTime"
                },
                "userId": {
                    "isEditable": false,
                    "dataType": "text"
                },
                "password": {
                    "isEditable": false,
                    "dataType": "password"
                },
                "status": {
                    "isEditable": false,
                    "dataType": "text"
                },
                "body": {
                    "isEditable": false,
                    "dataType": "text"
                }
            },

            "allowedParents": [],
            "allowedChildren": []
        }

        "stop": {
            "properties": {
                "stopId": {
                    "isEditable": false,
                    "dataType": "text"
                },
                "customerName": {
                    "isEditable": false,
                    "dataType": "text"
                },
                "customerAddress": {
                    "isEditable": false,
                    "dataType": "text"
                },
                "customerPhone": {
                    "isEditable": false,
                    "dataType": "text"
                }
            },

            "allowedParents": [
            ],

            "allowedChildren": [
                "pickup",
                "delivery",
                "image",
                "signature",
                "note"
            ]
        },

        "pickup": {
            "properties": {
                "pickupId": {
                    "isEditable": false,
                    "dataType": "text"
                }
            },

            "allowedParents": [
                "stop"
            ],

            "allowedChildren": [
                "order",
                "image",
                "signature",
                "note"
            ]
        }

        "delivery": {

            "properties": {
                "deliveryId": {
                    "isEditable": false,
                    "dataType": "text"
                }
            },

            "allowedParents": [
                "stop"
            ],

            "allowedChildren": [
                "order",
                "image",
                "signature",
                "note"
            ]
        }

        "order": {
            "properties": {
                "orderId": {
                    "isEditable": false,
                    "dataType": "text"
                },
                "orderField1": {
                    "name": "orderField1",
                    "isEditable": true,
                    "isRequired": true,
                    "dataType": "text",
                    "minLength": 0,
                    "maxLength": 20
                },
                "orderField2": {
                    "isEditable": true,
                    "isRequired": true,
                    "dataType": "text",
                    "values": [
                        { "id": "VAL1", "display": "Value 1" },
                        { "id": "VAL2", "display": "Value 2" },
                        { "id": "VAL3", "display": "Value 3" },
                        { "id": "VAL4", "display": "Value 4" }
                    ]
                },
                "orderField3": {
                    "isEditable": true,
                    "isRequired": false,
                    "dataType": "integer",
                    "minValue": 0,
                    "maxValue": 20
                },
                "orderField4": {
                    "isEditable": true,
                    "isRequired": false,
                    "dataType": "decimal",
                    "minValue": -10.0,
                    "maxValue": 10.0
                }
            }

            "allowedParents": [
                "pickup",
                "delivery"
            ],

            "allowedChildren": [
                "order-line",
                "image",
                "signature",
                "note"
            ]
        },

        "image": {
            "properties": {
                "fileName": {
                    "isEditable": false,
                    "dataType": "text"
                },
            }
        },

        "note": {
            "properties": {
                "text": {
                    "isEditable": true,
                    "dataType": "text"
                },
            }
        },

        "signature": {
            "properties": {
                "fileName": {
                    "isEditable": false,
                    "dataType": "text"
                },
                "signatorName": {
                    "isEditable": true,
                    "dataType": "text"
                },
                "dateTime": {
                    "isEditable": false,
                    "dataType": "dateTime"
                },
            }
        }
    }

    // Defines some common attributes for the dynamic application
    "appDescriptor": {

        // Defines some common attributes for the dynamic application views
        "viewDescriptors": {

            "collectionView": {
                "allowedActions": [
                    "openItem",             // Navigate to Detail View
                    "openItemInline",       // Expand to show Detail View inline
                    "addItem",              // Navigate to Add View
                    "addItemInline",        // Expand to show Add View inline (at top or bottom of list)
                    "editItem",             // Navigate to Edit View
                    "editItemInline",       // Expand to show Edit View inline
                    "deleteItem",           // Navigate to Delete View
                    "deleteItemInline",     // Expand to show Delete View inline
                    "addImageToItem",       // Navigate to Add Image View (associate result with selected item)
                    "addSignatureToItem",   // Navigate to Add Signature View (associate result with selected item)
                    "addNoteToItem"         // Navigate to Add Note View (associate result with selected item)
                ],
            }

            "detailView": {
                "allowedActions": [
                    "editItem",             // Navigate to Edit View for current item
                    "deleteItem",           // Navigate to Delete view for current item
                    "addImageToItem",       // Navigate to Add Image View
                    "addSignatureToItem",   // Navigate to Add Signature View
                    "addNoteToItem",        // Navigate to Add Note View
                    "openChildren",         // Children items/collections rendered as links to navigate child Detail/Collection view
                    "viewChildrenInline",   // Children items/collections rendered as items/collections inline
                ],
            },

            "editView": {
                "allowedActions": [
                    "save",
                    "cancel"
                ]
            },

            "addView": {
                "allowedActions": [
                    "save",
                    "cancel"
                ]
            },

            "deleteView": {
                "allowedActions": [
                    "confirm",
                    "cancel"
                ]
            }
        },

        "itemTemplates": {

            "transaction": {
                "collectionView": {
                }
                "detailView": {
                }
            }

            "stop": {
                "collectionView": {
                    "html": '<div> <h1 name="stopId"/> <p name="customerName"/> <p name="customerAddress"/> <p name="customerPhone" /> </div>',
                    "actions": [
                        "openItem"
                    ]
                },
                "detailView": {
                    "html": '<div> ... </div>',
                    "actions": [
                    ]
                },
                "editView": {
                },
                "addView": {
                },
                "deleteView": {
                }
            },

            "pickup": {
            },

            "delivery": {
            }
        },
    },

    ///////////////////////////////////////////////////////////////////////////
    //
    // Application Data: flattened list of "Nodes"
    //
    // A "Node" can either be an "item" or a "collection" - this affects how the
    // node will be displayed in the application. 
    //
    ///////////////////////////////////////////////////////////////////////////

    "appData": [

        // Inbox collection (special collection for storing the "inbox" items)
        {
            nodeType: "collection",         // A node must have a nodeType: "item" or "collection" (or composite (???))
            type: "stop",                   // A node must have type, it can be anything: stop, order, order-line, etc.
            id: "inbox",                    // A node must have a unique id (unique across all nodes)
            title: "Inbox"                  // A node must have a title, it can be anything
        },

        // Outbox collection (special collection for storing the "outbox" items)
        // Application can create nodes of type "pendingTransaction" with parentId "outbox" - and they will be rendered in this collection
        {
            nodeType: "collection",
            type: "transaction",
            id: "outbox",
            title: "Outbox"
        },

        // Sentbox collection (special collection for storing the "sentbox" items)
        // Application can create nodes of type "sentTransaction" with parentId "sentbox" - and they will be rendered in this collection
        {
            nodeType: "collection",
            type: "transaction",
            id: "sentbox",
            title: "Sent"
        }

        // Stop item (child of inbox)
        {
            nodeType: "item",
            type: "stop",
            id: "stop-12345",
            parentId: "inbox",              // A node can have a parentId, if it's a child of something
            title: "Stop 12345",
            properties: {                       // A node can have fields, they can be anything.  These will be data-bound to the templates above, based on the HTML element "name"
                name: "Stop 12345",
                address: "123 Main St., Denver, CO 80111",
                phone: "303-555-1234"
            }
        },

        // Pickup item (child of a stop)
        {
            nodeType: "item",
            type: "pickup",
            id: "pickup-11111",
            parentId: "stop-12345",
            title: "Pickup 11111",
            properties: {
                pickupId: "11111",
                pickupField1: "Pickup Field 1",
                pickupField1: "Pickup Field 2",
            }
        }

        // Order item (child of a pickup)
        {
            nodeType: "item",         
            type: "order",            
            id: "order-001",     
            parentId: "pickup-11111",   
            title: "Order 001",       
            properties: { 
                orderId: "001",
                orderField1: "Field 1",
                orderField2: "Field 2",
                orderField3: 123,
                orderField4: 7.0
            }
        },

        // Order-line (child of an order)
        {
            nodeType: "item",         
            type: "order-line",            
            id: "order-0001-line-1",     
            parentId: "order-0001",   
            title: "Order 00000001 Line 1",       
            properties: { 
                orderId: "001",
                line: 1,
                lineField1: "Field 1",
                lineField2: "Field 2",
                lineField3: 123,
                lineField4: 7.0
            }
        }

        // etc.
    ]
}
