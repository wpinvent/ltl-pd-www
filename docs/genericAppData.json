// Example data set for generic Pickup & Delivery application
// Pseudo JSON/JS format just for conceptual purposes

{
    ///////////////////////////////////////////////////////////////////////////
    //
    // Application Descriptor
    //
    // Defines the structure, templates, and basic logic in the application.
    //
    // The application will provide a framework/scaffolding for displaying, editing,
    // and working with any type of arbitrary data.  Each type of view will provide certain capabilities
    // which can be utilized through various configuration options.  The UI elements will be 100% configurable
    // through the use of HTML templates and naming-convention based data-binding to the
    // application data.
    // 
    // The application will provide basic views, which can be used through various
    // configuration mechanisms and data conventions.
    //
    // Login View (non-dynamic)
    // About View (non-dynamic)
    // Inbox/Outbox/Sentbox View (renders 3 arbitrary "Item Collection Views")
    // Item Collection View (renders an arbitrary collection of items - dynamic actions and UI based on type)
    // Item Detail View (renders an read-only display for an arbitrary item - dynamic actions and UI based on type)
    // Item Edit View (renders an edit form for an arbitrary item - dynamic UI based on type)
    // Item Add View (renders an add form for an arbitrary item - dynamic UI based on type)
    // Item Delete View (renders an delete confirmation screen for an arbitrary item - dynamic UI based on type)
    // 
    ///////////////////////////////////////////////////////////////////////////

    // Defines the common application parameters
    applicationDescriptor: {

        // Defines which node to display as the inbox
        inboxNodeId: "inbox",

        // Defines which node to display as the outbox
        outboxNodeId: "outbox",

        // Defines which node to display as the sentbox
        sentboxNodeId: "sentbox",

        // Defines how each item is rendered in an "Item Collection" view
        // Also defines wat acctions the Item Collection view is allowed to perform for its type of item
        collectionTemplates: [
            {
                // The type of data for this template
                type: "stop",

                // The HTML to render for each item in the collection
                html: '<div><h1 name="name"></h1><p name="address"></p><p name="phone"></p></div>',

                // The actions you're allowed to perform on the Collection View for this type of collection
                //
                // "expand" - Indicates if the app should make the item in the list expandable (may need to define "expandTemplates" if the expand view should be different than the standard detail view)
                // "view" - Indicates if the app should render a "View" button on each item in the list, which takes you to the "Item Detail View" (or makes the list item expandable...)
                // "add" - Indicates if the app should render an "Add" button at the top or bottom of the list view, which takes you to the Add View for the type of item in the collection
                // "edit" - Indicates if the app should render an "Edit" button on each item in the list, which takes you to the "Edit Item View"
                // "delete" - Indicates if the app should render a "Delete" button on each item in the list, which takes you to the "Delete Item View" (or just deletes the item...)
                // "addImage" - Indicates if the app should render an "Add Image" button on each item in the list
                // "addSignature" - Indicates if the app should render an "Add Signature" button on each item in the list
                // "addNote" - Indicates if the app should render an "Add Note" button on each item in the list
 
                actions: [
                    "expand",
                    "view"
                ]
            },
            {
                type: "order",
                html: '<div><h1 name="name"></h1><p name="name"></p><p name="orderField1"></p> ... </div>',
                actions: [
                    "expand",
                    "view",
                    "add",
                    "edit"
                ]
            },
            {
                type: "order-line",
                html: "<div>... </div>",
                actions: [
                    "expand",
                    "view",
                    "add",
                    "edit",
                    "delete"
                ]
            }
        ],

        // Defines how an item is rendered in an "Item Detail" view
        // If the item has children, we can render the children as in-line collection views, or provide buttons/links to go to the children collection views
        detailTemplates: [
            {
                type: "stop",
                html: "<div> ... </div>",

                // The actions you're allowed to perform on the Item Detail View for this type of item
                //
                // "viewChildren" - Indicates if the app should provide a way to view the children of the item (either inline, or via a button that takes you to the child's Collection View)
                // "add" - Indicates if the app should render an "Add" button to add a new item of this type (to the current item's parent (?))
                // "edit" - Indicates if the app should render an "Edit" button, which allows you to edit the current item
                // "delete" - Indicates if the app should render a "Delete" button, which allows you to delete the current item
                // "addImage" - Indicates if the app should render an "Add Image" button in the Item Detail View, to attach an image to the current item
                // "addSignature" - Indicates if the app should render an "Add Signature" button in the Item Detail View, to attach a signature image to the current item
                // "addNote" - Indicates if the app should render an "Add Note" button in the Item Detail View, to attach a note to the current item
                actions: [
                    "viewChildren" // Stop detail view should provide some type of access to the list of orders (or any other types of children) for the stop
                ]
            },
            {
                type: "order",
                html: "<div> ... </div>",
                actions: [
                    "edit",
                    "addImage",
                    "addSignature",
                    "addNote",
                    "viewChildren" // Order detail view should provide some type of access to the list of order-line items (or any other types of children) for the order
                ]
            },
            {
                type: "order-line",
                html: "<div> ... </div>",
                actions: [
                    "edit",
                    "addImage",
                    "addNote",
                    "addSignature"
                ]

            }
        ],

        // How an item is rendered in an "Edit Item" view
        // Edit View should probably not have actions other than editing the data fields for this item.  Photo/Note/Signature can be captured on the Detail View...
        editTemplates: [

            // Edit template for an "order"
            {
                type: "order",
                html: '<div><h1 name="name" /><input name="orderField1" type="text" /> ... </div>', 

                // TODO: 
                // This type of metadata might be able to be captured using CSS classes in the html above
                fields: [
                    name: {
                        isEditable: false
                    },
                    orderField1: {
                        isEditable: true,
                        isRequired: true,
                        dataType: "text",
                        maxLength: 20
                    },
                    orderField2: {
                        isEditable: true,
                        isRequired: true,
                        dataType: "dropDown",
                        values: [
                            { id: "VAL1", display: "Value 1" },
                            { id: "VAL2", display: "Value 2" },
                            { id: "VAL3", display: "Value 3" },
                            { id: "VAL4", display: "Value 4" }
                        ]
                    },
                    orderField3: {
                        isEditable: true,
                        isRequired: false,
                        dataType: "integer",
                        minValue: 0,
                        maxValue: 20
                    },
                    orderField4: {
                        isEditable: true,
                        isRequired: false,
                        dataType: "decimal",
                        minValue: -10.0,
                        maxValue: 10.0
                    }
                ]
            },

            // Edit template for an "order-item"
            {
                type: "order-line"
                // ...similar to order
            }
        ],

        addTemplates: [

            // Similar to editItemTemplates, but these are used for adding a new item
 
            // May need to define a convention for how new data will be marked as "device-originated"
        ]
    },

    ///////////////////////////////////////////////////////////////////////////
    //
    // Application Data: flattened list of "Nodes"
    //
    // A "Node" can either be an "item" or a "collection" - this affects how the
    // node will be displayed in the application. 
    //
    ///////////////////////////////////////////////////////////////////////////

    nodes: [

        // Inbox collection
        {
            nodeType: "collection",         // A node must have a nodeType: "item" or "collection" (or composite (???))
            type: "stop",                   // A node must have type, it can be anything: stop, order, order-line, etc.
            id: "inbox",                    // A node must have a unique id (unique across all nodes)
            title: "Inbox"                  // A node must have a title, it can be anything
        },

        // Outbox collection
        // Application can create nodes of type "pendingTransaction" with parentId "outbox" - and they will be rendered in this collection
        {
            nodeType: "collection",
            type: "pendingTransaction",
            id: "outbox",
            title: "Outbox"
        },

        // Sentbox collection
        // Application can create nodes of type "sentTransaction" with parentId "sentbox" - and they will be rendered in this collection
        {
            nodeType: "collection",
            type: "sentTransaction",
            id: "sentbox",
            title: "Sent"
        }

        // Stop item
        {
            nodeType: "item",
            type: "stop",
            id: "stop-12345",
            parentId: "inbox",              // A node can have a parentId, if it's a child of something
            title: "Stop 12345",
            fields: {                       // A node can have fields, they can be anything.  These will be data-bound to the templates above, based on the HTML element "name"
                name: "Stop 12345",
                address: "123 Main St., Denver, CO 80111",
                phone: "303-555-1234"
            }
        },

        // Order item
        {
            nodeType: "item",         
            type: "order",            
            id: "order-00000001",     
            parentId: "stop-12345",   
            title: "Order 001",       
            fields: { 
                name: "Order 001",
                orderField1: "Field 1",
                orderField2: "Field 2",
                orderField3: 123,
                orderField4: 7.0
            }
        },

        // Order-line item
        {
            nodeType: "item",         
            type: "order-line",            
            id: "order-00000001-line-1",     
            parentId: "order-00000001",   
            title: "Order 00000001 Line 1",       
            fields: { 
                name: "Line 1",
                lineField1: "Field 1",
                lineField2: "Field 2",
                lineField3: 123,
                lineField4: 7.0
            }
        }

        // etc.
    ]
}
